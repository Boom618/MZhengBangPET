apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions' // kotlin-android 中包含了这个插件 免去 findViewBy

def ZBConfig = rootProject.ext

static def releaseTime() {
    //return new Date().format("yyyy-MM-dd-HH.mm", TimeZone.getTimeZone("GMT+8"))
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+8"))
}

android {
    compileSdkVersion ZBConfig.compileSdkVersion
    buildToolsVersion ZBConfig.buildToolsVersion
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }
    defaultConfig {
        applicationId "com.ty.zbpet"
        minSdkVersion ZBConfig.minSdkVersion
        targetSdkVersion ZBConfig.targetSdkVersion
        versionCode ZBConfig.versionCode
        versionName ZBConfig.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' //, 'armeabi-v7a', ''x86, 'x86_64', 'arm64-v8a'
        }
//        signingConfig signingConfigs.developRelease
        // alibaba ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    signingConfigs {
        // 多渠道签名
        developRelease {
            storeFile file("../scanner_activate.jks")
            storePassword "ty.admin.scanner"
            keyAlias "key0"
            keyPassword "ty.admin.scanner"
        }

//        masterRelease {
//            storeFile file("../scanner_activate.jks")
//            storePassword "ty.admin.scanner"
//            keyAlias "key0"
//            keyPassword "ty.admin.scanner"
//        }
    }
    flavorDimensions "default"
    productFlavors {
        develop {

            versionCode ZBConfig.versionCode
            versionName ZBConfig.versionName
            signingConfig = signingConfigs.developRelease

            buildConfigField "String", "SERVICE_URL", ZBConfig.config.serviceDevelopUrl

        }

//        master {
//
//            versionCode ZBConfig.versionCode
//            versionName ZBConfig.versionName
//            signingConfig = signingConfigs.masterRelease
//
//            buildConfigField "String", "SERVICE_URL", ZBConfig.config.serviceMasterUrl
//
//        }
    }
    buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            signingConfig null
            // 开启混淆（有问题待解决）
            minifyEnabled false
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig null
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }
    }
    dexOptions {

        //此处可根据电脑本身配置 数值越大 当然越快
        javaMaxHeapSize "4g"

        preDexLibraries = false

    }

    lintOptions {

        checkReleaseBuilds false

    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
//    ${variant.productFlavors[0].name}当前渠道名
//    ${variant.productFlavors[0].versionName}当前版本名
//    ${releaseTime()}当前时间
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "${variant.productFlavors[0].name}-v${variant.productFlavors[0].versionName}-${releaseTime()}.apk"
            }
    }
}
dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:design:${ZBConfig.supportLibraryVersion}"
    implementation "com.android.support:support-v4:${ZBConfig.supportLibraryVersion}"
    implementation "com.android.support:appcompat-v7:${ZBConfig.supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${ZBConfig.supportLibraryVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.android.support:multidex:1.0.3'

    implementation "com.github.bumptech.glide:glide:${ZBConfig.glideVersion}"
    // butter knife
    implementation "com.jakewharton:butterknife:${ZBConfig.butterknifeVersion}"
    //kapt "com.jakewharton:butterknife-compiler:${ZBConfig.butterknifeVersion}"
    implementation "org.greenrobot:eventbus:${ZBConfig.eventbusVersion}"
//    implementation 'pub.devrel:easypermissions:2.0.0'

    //网络请求库
    implementation "com.squareup.okhttp3:okhttp:${ZBConfig.okhttp3Version}"
    implementation "com.squareup.retrofit2:retrofit:${ZBConfig.retrofit2Version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${ZBConfig.retrofit2Version}"
    implementation "com.squareup.retrofit2:converter-gson:${ZBConfig.retrofit2Version}"

    //Gson解析
    implementation "com.google.code.gson:gson:${ZBConfig.googleGsonVersion}"
    implementation 'com.alibaba:fastjson:1.2.57'

    //日志拦截器
    implementation "com.squareup.okhttp3:logging-interceptor:${ZBConfig.okhttp3Version}"

    //rxjava相关依赖
    implementation "io.reactivex.rxjava2:rxjava:${ZBConfig.rx2Version}"
    implementation "io.reactivex.rxjava2:rxandroid:${ZBConfig.rx2AndroidVersion}"

    // Rx permissions
    implementation "com.github.tbruyelle:rxpermissions:${ZBConfig.rxpermissions_version}"

    // 时间选择框
    implementation "com.contrarywind:Android-PickerView:${ZBConfig.PickerViewVersion}"

    // log
    //implementation 'com.elvishew:xlog:1.6.1'
    implementation "com.orhanobut:logger:${ZBConfig.loggerVersion}"

    // loading bar
    //implementation "com.dyhdyh.loadingbar:loadingbar:${ZBConfig.LoadingBarVersion}"
    // 单 Activity + 多 Fragment
    implementation 'me.yokeyword:fragmentation:1.3.6'
    // LoadingDialog
    implementation "com.github.ForgetAll:LoadingDialog:v1.0.4"
    // 解耦 dialog
    implementation "com.billy.android:gloading:1.0.0"
    // Toasty
    implementation 'com.github.GrenderG:Toasty:1.4.1'
    // light key value 存值
    implementation 'com.horizon.lightkv:lightkv:1.0.7'
    // arouter
    implementation 'com.alibaba:arouter-api:1.4.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    // 沉浸状态栏
    implementation 'com.jaeger.statusbarutil:library:1.5.1'

    //1.1.0 API改动过大，老用户升级需谨慎 listView 刷新 {ZBConfig.SmartRefreshVersion}
    implementation "com.scwang.smartrefresh:SmartRefreshLayout:${ZBConfig.SmartRefreshVersion}"

    //没有使用特殊 Header，可以不加这行
    implementation "com.scwang.smartrefresh:SmartRefreshHeader:${ZBConfig.SmartRefreshVersion}"

    // adapter
    implementation "com.zhy:base-rvadapter:${ZBConfig.rvadapterVersion}"
    // pda 扫码
    implementation files('libs/pdasdk.jar')

    //implementation "com.zhouyou:rxeasyhttp:${ZBConfig.rxeasyhttpVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    // 协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
//    implementation 'androidx.core:core-ktx:1.0.1'

    // 知乎 image picker
    implementation 'com.github.qingmei2:rximagepicker:2.2.0'
    implementation 'com.github.qingmei2:rximagepicker_support_zhihu:2.2.0'

    // 相册选择
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.2.3'

    // TabLayout 库
    implementation "com.flyco.tablayout:FlycoTabLayout_Lib:${ZBConfig.tablayout_version}"

    // bugly 管理
    implementation "com.tencent.bugly:crashreport:${ZBConfig.bugly_version}"

    // leak canary 内存检测
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${ZBConfig.leakcanary_version}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${ZBConfig.leakcanary_version}"

//    implementation "androidx.lifecycle:lifecycle-runtime:${ZBConfig.lifecycle_version}"
//    implementation "androidx.lifecycle:lifecycle-livedata:${ZBConfig.lifecycle_version}"
}

